name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  release:
    types: [ created ]

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run pytest
      run: |
        pytest --verbose --cov=. --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  validate-test-data:
    name: Validate Test Data Processing
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create output directory
      run: mkdir -p test_output

    - name: Test high-tech industry chemicals processing
      run: |
        python -c "
        from Read_excels_as_one import high_tech_industry_chems_main
        high_tech_industry_chems_main(
            base='tests/test_data/sample_company',
            out_rel='/test_output'
        )
        print('✓ High-tech industry chemicals processing completed successfully')
        "

    - name: Test rescue equipment processing
      run: |
        python -c "
        from Read_excels_as_one import high_tech_industry_rescue_equipment_main
        high_tech_industry_rescue_equipment_main(
            base='tests/test_data/sample_company',
            out_rel='/test_output/rescue_equipment'
        )
        print('✓ Rescue equipment processing completed successfully')
        "

    - name: Test firefighter training survey processing
      run: |
        python -c "
        from Read_excels_as_one import firefighter_training_survey_main
        firefighter_training_survey_main(
            base='tests/test_data/sample_firefighter_survey',
            out_rel='/test_output/firefighter'
        )
        print('✓ Firefighter training survey processing completed successfully')
        "

    - name: Verify output files were created
      run: |
        echo "Checking for generated output files..."
        ls -lR test_output/
        if [ -z "$(ls -A test_output/)" ]; then
          echo "❌ Error: No output files were generated"
          exit 1
        else
          echo "✓ Output files successfully generated"
        fi

    - name: Upload test outputs as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-outputs
        path: test_output/
        retention-days: 7

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort pylint

    - name: Check code formatting with Black
      run: black --check --diff .
      continue-on-error: true

    - name: Check import sorting with isort
      run: isort --check-only --diff .
      continue-on-error: true

    - name: Lint with pylint
      run: pylint **/*.py --exit-zero
      continue-on-error: true
